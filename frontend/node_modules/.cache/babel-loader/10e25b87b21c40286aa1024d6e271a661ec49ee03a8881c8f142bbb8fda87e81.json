{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ClassForm',\n  props: {\n    id: {\n      type: Number,\n      required: false\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const router = useRouter();\n    const formRef = ref(null);\n    const loading = ref(false);\n    const submitting = ref(false);\n\n    // Form data\n    const form = reactive({\n      id: null,\n      name: '',\n      description: ''\n    });\n\n    // Form validation rules\n    const rules = {\n      name: [{\n        required: true,\n        message: 'Please enter class name',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 100,\n        message: 'Length should be 2 to 100 characters',\n        trigger: 'blur'\n      }]\n    };\n\n    // Fetch class data if in edit mode\n    const fetchClassData = async () => {\n      if (!props.isEdit || !props.id) return;\n      loading.value = true;\n      try {\n        await store.dispatch('classes/fetchClass', props.id);\n        const classData = store.getters['classes/currentClass'];\n        if (classData) {\n          // Populate form with class data\n          form.id = classData.id;\n          form.name = classData.name;\n          form.description = classData.description || '';\n        } else {\n          ElMessage.error('Class not found');\n          router.push('/classes');\n        }\n      } catch (error) {\n        console.error('Error fetching class:', error);\n        ElMessage.error('Failed to load class data');\n        router.push('/classes');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Submit form\n    const submitForm = () => {\n      formRef.value.validate(async valid => {\n        if (!valid) return;\n        submitting.value = true;\n        try {\n          if (props.isEdit) {\n            // Update existing class\n            await store.dispatch('classes/updateClass', {\n              ...form\n            });\n            ElMessage.success('Class updated successfully');\n          } else {\n            // Create new class\n            await store.dispatch('classes/createClass', {\n              ...form\n            });\n            ElMessage.success('Class created successfully');\n          }\n          router.push('/classes');\n        } catch (error) {\n          console.error('Error saving class:', error);\n          ElMessage.error('Failed to save class');\n        } finally {\n          submitting.value = false;\n        }\n      });\n    };\n\n    // Reset form\n    const resetForm = () => {\n      if (props.isEdit) {\n        // If editing, reset to original values\n        fetchClassData();\n      } else {\n        // If creating new, clear all fields\n        formRef.value.resetFields();\n      }\n    };\n\n    // Fetch data on component mount\n    onMounted(() => {\n      if (props.isEdit) {\n        fetchClassData();\n      }\n    });\n    return {\n      formRef,\n      form,\n      rules,\n      loading,\n      submitting,\n      submitForm,\n      resetForm\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","useStore","useRouter","ElMessage","name","props","id","type","Number","required","isEdit","Boolean","default","setup","store","router","formRef","loading","submitting","form","description","rules","message","trigger","min","max","fetchClassData","value","dispatch","classData","getters","error","push","console","submitForm","validate","valid","success","resetForm","resetFields"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\views\\classes\\ClassForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"class-form-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">{{ isEdit ? 'Edit Class' : 'Add New Class' }}</h1>\r\n      <el-button @click=\"$router.push('/classes')\">\r\n        Back to Classes\r\n      </el-button>\r\n    </div>\r\n    \r\n    <el-card>\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-position=\"top\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <!-- Class Name -->\r\n        <el-form-item label=\"Class Name\" prop=\"name\">\r\n          <el-input v-model=\"form.name\" placeholder=\"Enter class name\" />\r\n        </el-form-item>\r\n        \r\n        <!-- Description -->\r\n        <el-form-item label=\"Description\" prop=\"description\">\r\n          <el-input \r\n            v-model=\"form.description\" \r\n            placeholder=\"Enter class description\" \r\n            type=\"textarea\" \r\n            :rows=\"4\" \r\n          />\r\n        </el-form-item>\r\n        \r\n        <!-- Form Actions -->\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\r\n            {{ isEdit ? 'Update Class' : 'Create Class' }}\r\n          </el-button>\r\n          <el-button @click=\"resetForm\">Reset</el-button>\r\n          <el-button @click=\"$router.push('/classes')\" type=\"info\">Cancel</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ClassForm',\r\n  props: {\r\n    id: {\r\n      type: Number,\r\n      required: false\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  setup(props) {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const formRef = ref(null)\r\n    const loading = ref(false)\r\n    const submitting = ref(false)\r\n    \r\n    // Form data\r\n    const form = reactive({\r\n      id: null,\r\n      name: '',\r\n      description: ''\r\n    })\r\n    \r\n    // Form validation rules\r\n    const rules = {\r\n      name: [\r\n        { required: true, message: 'Please enter class name', trigger: 'blur' },\r\n        { min: 2, max: 100, message: 'Length should be 2 to 100 characters', trigger: 'blur' }\r\n      ]\r\n    }\r\n    \r\n    // Fetch class data if in edit mode\r\n    const fetchClassData = async () => {\r\n      if (!props.isEdit || !props.id) return\r\n      \r\n      loading.value = true\r\n      try {\r\n        await store.dispatch('classes/fetchClass', props.id)\r\n        const classData = store.getters['classes/currentClass']\r\n        \r\n        if (classData) {\r\n          // Populate form with class data\r\n          form.id = classData.id\r\n          form.name = classData.name\r\n          form.description = classData.description || ''\r\n        } else {\r\n          ElMessage.error('Class not found')\r\n          router.push('/classes')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching class:', error)\r\n        ElMessage.error('Failed to load class data')\r\n        router.push('/classes')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // Submit form\r\n    const submitForm = () => {\r\n      formRef.value.validate(async valid => {\r\n        if (!valid) return\r\n        \r\n        submitting.value = true\r\n        try {\r\n          if (props.isEdit) {\r\n            // Update existing class\r\n            await store.dispatch('classes/updateClass', { ...form })\r\n            ElMessage.success('Class updated successfully')\r\n          } else {\r\n            // Create new class\r\n            await store.dispatch('classes/createClass', { ...form })\r\n            ElMessage.success('Class created successfully')\r\n          }\r\n          router.push('/classes')\r\n        } catch (error) {\r\n          console.error('Error saving class:', error)\r\n          ElMessage.error('Failed to save class')\r\n        } finally {\r\n          submitting.value = false\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Reset form\r\n    const resetForm = () => {\r\n      if (props.isEdit) {\r\n        // If editing, reset to original values\r\n        fetchClassData()\r\n      } else {\r\n        // If creating new, clear all fields\r\n        formRef.value.resetFields()\r\n      }\r\n    }\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      if (props.isEdit) {\r\n        fetchClassData()\r\n      }\r\n    })\r\n    \r\n    return {\r\n      formRef,\r\n      form,\r\n      rules,\r\n      loading,\r\n      submitting,\r\n      submitForm,\r\n      resetForm\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}