{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createBlock as _createBlock, withDirectives as _withDirectives, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"class-form-container\"\n};\nconst _hoisted_2 = {\n  class: \"page-header\"\n};\nconst _hoisted_3 = {\n  class: \"page-title\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  const _directive_loading = _resolveDirective(\"loading\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", _hoisted_3, _toDisplayString($props.isEdit ? 'Edit Class' : 'Add New Class'), 1 /* TEXT */), _createVNode(_component_el_button, {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.$router.push('/classes'))\n  }, {\n    default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\" Back to Classes \")])),\n    _: 1 /* STABLE */\n  })]), _createVNode(_component_el_card, null, {\n    default: _withCtx(() => [_withDirectives((_openBlock(), _createBlock(_component_el_form, {\n      ref: \"formRef\",\n      model: $setup.form,\n      rules: $setup.rules,\n      \"label-position\": \"top\"\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" Class Name \"), _createVNode(_component_el_form_item, {\n        label: \"Class Name\",\n        prop: \"name\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $setup.form.name,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.form.name = $event),\n          placeholder: \"Enter class name\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }), _createCommentVNode(\" Description \"), _createVNode(_component_el_form_item, {\n        label: \"Description\",\n        prop: \"description\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: $setup.form.description,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.form.description = $event),\n          placeholder: \"Enter class description\",\n          type: \"textarea\",\n          rows: 4\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }), _createCommentVNode(\" Form Actions \"), _createVNode(_component_el_form_item, null, {\n        default: _withCtx(() => [_createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: $setup.submitForm,\n          loading: $setup.submitting\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString($props.isEdit ? 'Update Class' : 'Create Class'), 1 /* TEXT */)]),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\", \"loading\"]), _createVNode(_component_el_button, {\n          onClick: $setup.resetForm\n        }, {\n          default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\"Reset\")])),\n          _: 1 /* STABLE */\n        }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n          onClick: _cache[3] || (_cache[3] = $event => _ctx.$router.push('/classes')),\n          type: \"info\"\n        }, {\n          default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\"Cancel\")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\", \"rules\"])), [[_directive_loading, $setup.loading]])]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$props","isEdit","_createVNode","_component_el_button","onClick","_cache","$event","_ctx","$router","push","default","_withCtx","_createTextVNode","_","_component_el_card","_createBlock","_component_el_form","ref","model","$setup","form","rules","_createCommentVNode","_component_el_form_item","label","prop","_component_el_input","modelValue","name","placeholder","description","type","rows","submitForm","loading","submitting","resetForm"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\views\\classes\\ClassForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"class-form-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">{{ isEdit ? 'Edit Class' : 'Add New Class' }}</h1>\r\n      <el-button @click=\"$router.push('/classes')\">\r\n        Back to Classes\r\n      </el-button>\r\n    </div>\r\n    \r\n    <el-card>\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-position=\"top\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <!-- Class Name -->\r\n        <el-form-item label=\"Class Name\" prop=\"name\">\r\n          <el-input v-model=\"form.name\" placeholder=\"Enter class name\" />\r\n        </el-form-item>\r\n        \r\n        <!-- Description -->\r\n        <el-form-item label=\"Description\" prop=\"description\">\r\n          <el-input \r\n            v-model=\"form.description\" \r\n            placeholder=\"Enter class description\" \r\n            type=\"textarea\" \r\n            :rows=\"4\" \r\n          />\r\n        </el-form-item>\r\n        \r\n        <!-- Form Actions -->\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\r\n            {{ isEdit ? 'Update Class' : 'Create Class' }}\r\n          </el-button>\r\n          <el-button @click=\"resetForm\">Reset</el-button>\r\n          <el-button @click=\"$router.push('/classes')\" type=\"info\">Cancel</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ClassForm',\r\n  props: {\r\n    id: {\r\n      type: Number,\r\n      required: false\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  setup(props) {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const formRef = ref(null)\r\n    const loading = ref(false)\r\n    const submitting = ref(false)\r\n    \r\n    // Form data\r\n    const form = reactive({\r\n      id: null,\r\n      name: '',\r\n      description: ''\r\n    })\r\n    \r\n    // Form validation rules\r\n    const rules = {\r\n      name: [\r\n        { required: true, message: 'Please enter class name', trigger: 'blur' },\r\n        { min: 2, max: 100, message: 'Length should be 2 to 100 characters', trigger: 'blur' }\r\n      ]\r\n    }\r\n    \r\n    // Fetch class data if in edit mode\r\n    const fetchClassData = async () => {\r\n      if (!props.isEdit || !props.id) return\r\n      \r\n      loading.value = true\r\n      try {\r\n        await store.dispatch('classes/fetchClass', props.id)\r\n        const classData = store.getters['classes/currentClass']\r\n        \r\n        if (classData) {\r\n          // Populate form with class data\r\n          form.id = classData.id\r\n          form.name = classData.name\r\n          form.description = classData.description || ''\r\n        } else {\r\n          ElMessage.error('Class not found')\r\n          router.push('/classes')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching class:', error)\r\n        ElMessage.error('Failed to load class data')\r\n        router.push('/classes')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // Submit form\r\n    const submitForm = () => {\r\n      formRef.value.validate(async valid => {\r\n        if (!valid) return\r\n        \r\n        submitting.value = true\r\n        try {\r\n          if (props.isEdit) {\r\n            // Update existing class\r\n            await store.dispatch('classes/updateClass', { ...form })\r\n            ElMessage.success('Class updated successfully')\r\n          } else {\r\n            // Create new class\r\n            await store.dispatch('classes/createClass', { ...form })\r\n            ElMessage.success('Class created successfully')\r\n          }\r\n          router.push('/classes')\r\n        } catch (error) {\r\n          console.error('Error saving class:', error)\r\n          ElMessage.error('Failed to save class')\r\n        } finally {\r\n          submitting.value = false\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Reset form\r\n    const resetForm = () => {\r\n      if (props.isEdit) {\r\n        // If editing, reset to original values\r\n        fetchClassData()\r\n      } else {\r\n        // If creating new, clear all fields\r\n        formRef.value.resetFields()\r\n      }\r\n    }\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      if (props.isEdit) {\r\n        fetchClassData()\r\n      }\r\n    })\r\n    \r\n    return {\r\n      formRef,\r\n      form,\r\n      rules,\r\n      loading,\r\n      submitting,\r\n      submitForm,\r\n      resetForm\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}