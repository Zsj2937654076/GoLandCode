{"ast":null,"code":"import axios from 'axios';\n\n// API base URL\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:8080/api';\nconst state = {\n  classes: [],\n  class: null,\n  classStudents: []\n};\nconst getters = {\n  allClasses: state => state.classes,\n  classById: state => id => state.classes.find(cls => cls.id === id),\n  currentClass: state => state.class,\n  classStudents: state => state.classStudents,\n  // Create a map of classId to className for easy access\n  classOptions: state => state.classes.map(cls => ({\n    value: cls.id,\n    label: cls.name\n  }))\n};\nconst actions = {\n  // Fetch all classes\n  async fetchClasses({\n    commit\n  }) {\n    try {\n      const response = await axios.get(`${API_URL}/classes`);\n      commit('SET_CLASSES', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching classes:', error);\n      throw error;\n    }\n  },\n  // Fetch a single class by ID\n  async fetchClass({\n    commit\n  }, id) {\n    try {\n      const response = await axios.get(`${API_URL}/classes/${id}`);\n      commit('SET_CLASS', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching class ${id}:`, error);\n      throw error;\n    }\n  },\n  // Fetch students in a class\n  async fetchClassStudents({\n    commit\n  }, classId) {\n    try {\n      const response = await axios.get(`${API_URL}/classes/${classId}/students`);\n      commit('SET_CLASS_STUDENTS', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching students for class ${classId}:`, error);\n      throw error;\n    }\n  },\n  // Create a new class\n  async createClass({\n    commit\n  }, classData) {\n    try {\n      const response = await axios.post(`${API_URL}/classes`, classData);\n      commit('ADD_CLASS', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating class:', error);\n      throw error;\n    }\n  },\n  // Update an existing class\n  async updateClass({\n    commit\n  }, classData) {\n    try {\n      const response = await axios.put(`${API_URL}/classes/${classData.id}`, classData);\n      commit('UPDATE_CLASS', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating class ${classData.id}:`, error);\n      throw error;\n    }\n  },\n  // Delete a class\n  async deleteClass({\n    commit\n  }, id) {\n    try {\n      await axios.delete(`${API_URL}/classes/${id}`);\n      commit('DELETE_CLASS', id);\n      return id;\n    } catch (error) {\n      console.error(`Error deleting class ${id}:`, error);\n      throw error;\n    }\n  }\n};\nconst mutations = {\n  SET_CLASSES(state, classes) {\n    state.classes = classes;\n  },\n  SET_CLASS(state, classData) {\n    state.class = classData;\n  },\n  SET_CLASS_STUDENTS(state, students) {\n    state.classStudents = students;\n  },\n  ADD_CLASS(state, classData) {\n    state.classes.push(classData);\n  },\n  UPDATE_CLASS(state, updatedClass) {\n    const index = state.classes.findIndex(c => c.id === updatedClass.id);\n    if (index !== -1) {\n      state.classes.splice(index, 1, updatedClass);\n    }\n    if (state.class && state.class.id === updatedClass.id) {\n      state.class = updatedClass;\n    }\n  },\n  DELETE_CLASS(state, id) {\n    state.classes = state.classes.filter(classData => classData.id !== id);\n    if (state.class && state.class.id === id) {\n      state.class = null;\n    }\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["axios","API_URL","process","env","VUE_APP_API_URL","state","classes","class","classStudents","getters","allClasses","classById","id","find","cls","currentClass","classOptions","map","value","label","name","actions","fetchClasses","commit","response","get","data","error","console","fetchClass","fetchClassStudents","classId","createClass","classData","post","updateClass","put","deleteClass","delete","mutations","SET_CLASSES","SET_CLASS","SET_CLASS_STUDENTS","students","ADD_CLASS","push","UPDATE_CLASS","updatedClass","index","findIndex","c","splice","DELETE_CLASS","filter","namespaced"],"sources":["E:/GoLand20240404/Project/student_management/frontend/src/store/modules/classes.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// API base URL\r\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:8080/api'\r\n\r\nconst state = {\r\n  classes: [],\r\n  class: null,\r\n  classStudents: []\r\n}\r\n\r\nconst getters = {\r\n  allClasses: state => state.classes,\r\n  classById: state => id => state.classes.find(cls => cls.id === id),\r\n  currentClass: state => state.class,\r\n  classStudents: state => state.classStudents,\r\n  // Create a map of classId to className for easy access\r\n  classOptions: state => state.classes.map(cls => ({\r\n    value: cls.id,\r\n    label: cls.name\r\n  }))\r\n}\r\n\r\nconst actions = {\r\n  // Fetch all classes\r\n  async fetchClasses({ commit }) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/classes`)\r\n      commit('SET_CLASSES', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error fetching classes:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  // Fetch a single class by ID\r\n  async fetchClass({ commit }, id) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/classes/${id}`)\r\n      commit('SET_CLASS', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error(`Error fetching class ${id}:`, error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  // Fetch students in a class\r\n  async fetchClassStudents({ commit }, classId) {\r\n    try {\r\n      const response = await axios.get(`${API_URL}/classes/${classId}/students`)\r\n      commit('SET_CLASS_STUDENTS', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error(`Error fetching students for class ${classId}:`, error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  // Create a new class\r\n  async createClass({ commit }, classData) {\r\n    try {\r\n      const response = await axios.post(`${API_URL}/classes`, classData)\r\n      commit('ADD_CLASS', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error('Error creating class:', error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  // Update an existing class\r\n  async updateClass({ commit }, classData) {\r\n    try {\r\n      const response = await axios.put(`${API_URL}/classes/${classData.id}`, classData)\r\n      commit('UPDATE_CLASS', response.data)\r\n      return response.data\r\n    } catch (error) {\r\n      console.error(`Error updating class ${classData.id}:`, error)\r\n      throw error\r\n    }\r\n  },\r\n  \r\n  // Delete a class\r\n  async deleteClass({ commit }, id) {\r\n    try {\r\n      await axios.delete(`${API_URL}/classes/${id}`)\r\n      commit('DELETE_CLASS', id)\r\n      return id\r\n    } catch (error) {\r\n      console.error(`Error deleting class ${id}:`, error)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\nconst mutations = {\r\n  SET_CLASSES(state, classes) {\r\n    state.classes = classes\r\n  },\r\n  SET_CLASS(state, classData) {\r\n    state.class = classData\r\n  },\r\n  SET_CLASS_STUDENTS(state, students) {\r\n    state.classStudents = students\r\n  },\r\n  ADD_CLASS(state, classData) {\r\n    state.classes.push(classData)\r\n  },\r\n  UPDATE_CLASS(state, updatedClass) {\r\n    const index = state.classes.findIndex(c => c.id === updatedClass.id)\r\n    if (index !== -1) {\r\n      state.classes.splice(index, 1, updatedClass)\r\n    }\r\n    if (state.class && state.class.id === updatedClass.id) {\r\n      state.class = updatedClass\r\n    }\r\n  },\r\n  DELETE_CLASS(state, id) {\r\n    state.classes = state.classes.filter(classData => classData.id !== id)\r\n    if (state.class && state.class.id === id) {\r\n      state.class = null\r\n    }\r\n  }\r\n}\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}