{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'StudentList',\n  setup() {\n    const store = useStore();\n    const loading = ref(false);\n\n    // Get students from store\n    const students = computed(() => store.getters['students/allStudents']);\n    const pagination = computed(() => store.getters['students/pagination']);\n    const classOptions = computed(() => store.getters['classes/classOptions']);\n\n    // Filter state\n    const filters = reactive({\n      classId: '',\n      studentId: '',\n      name: ''\n    });\n\n    // Delete dialog state\n    const deleteDialog = reactive({\n      visible: false,\n      student: null,\n      loading: false\n    });\n\n    // Fetch students and classes\n    const fetchData = async () => {\n      loading.value = true;\n      try {\n        await Promise.all([store.dispatch('students/fetchStudents'), store.dispatch('classes/fetchClasses')]);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        ElMessage.error('Failed to load data');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Handle filter changes\n    const handleFilterChange = () => {\n      store.dispatch('students/setFilters', {\n        classId: filters.classId,\n        studentId: filters.studentId,\n        name: filters.name\n      });\n    };\n\n    // Reset filters\n    const resetFilters = () => {\n      filters.classId = '';\n      filters.studentId = '';\n      filters.name = '';\n      handleFilterChange();\n    };\n\n    // Pagination handlers\n    const handleSizeChange = size => {\n      store.dispatch('students/setPagination', {\n        pageSize: size\n      });\n    };\n    const handleCurrentChange = page => {\n      store.dispatch('students/setPage', page);\n    };\n\n    // Delete student\n    const confirmDelete = student => {\n      deleteDialog.student = student;\n      deleteDialog.visible = true;\n    };\n    const deleteStudent = async () => {\n      if (!deleteDialog.student) return;\n      deleteDialog.loading = true;\n      try {\n        await store.dispatch('students/deleteStudent', deleteDialog.student.id);\n        ElMessage.success('Student deleted successfully');\n        deleteDialog.visible = false;\n      } catch (error) {\n        console.error('Error deleting student:', error);\n        ElMessage.error('Failed to delete student');\n      } finally {\n        deleteDialog.loading = false;\n      }\n    };\n\n    // Fetch data on component mount\n    onMounted(fetchData);\n    return {\n      students,\n      loading,\n      pagination,\n      filters,\n      classOptions,\n      deleteDialog,\n      handleFilterChange,\n      resetFilters,\n      handleSizeChange,\n      handleCurrentChange,\n      confirmDelete,\n      deleteStudent\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useStore","ElMessage","name","setup","store","loading","students","getters","pagination","classOptions","filters","classId","studentId","deleteDialog","visible","student","fetchData","value","Promise","all","dispatch","error","console","handleFilterChange","resetFilters","handleSizeChange","size","pageSize","handleCurrentChange","page","confirmDelete","deleteStudent","id","success"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\views\\students\\StudentList.vue"],"sourcesContent":["<template>\r\n  <div class=\"student-list-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Students</h1>\r\n      <el-button type=\"primary\" @click=\"$router.push('/students/new')\">\r\n        Add New Student\r\n      </el-button>\r\n    </div>\r\n    \r\n    <!-- Filter Form -->\r\n    <el-card class=\"filter-card\">\r\n      <el-form :inline=\"true\" :model=\"filters\" class=\"filter-container\">\r\n        <el-form-item label=\"Class\">\r\n          <el-select \r\n            v-model=\"filters.classId\" \r\n            placeholder=\"Select Class\" \r\n            clearable\r\n            @change=\"handleFilterChange\"\r\n          >\r\n            <el-option \r\n              v-for=\"option in classOptions\" \r\n              :key=\"option.value\" \r\n              :label=\"option.label\" \r\n              :value=\"option.value\" \r\n            />\r\n          </el-select>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"Student ID\">\r\n          <el-input \r\n            v-model=\"filters.studentId\" \r\n            placeholder=\"Search by ID\" \r\n            clearable\r\n            @input=\"handleFilterChange\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"Name\">\r\n          <el-input \r\n            v-model=\"filters.name\" \r\n            placeholder=\"Search by name\" \r\n            clearable\r\n            @input=\"handleFilterChange\"\r\n          />\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"handleFilterChange\">Search</el-button>\r\n          <el-button @click=\"resetFilters\">Reset</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n    \r\n    <!-- Students Table -->\r\n    <el-card class=\"mt-20\">\r\n      <el-table \r\n        :data=\"students\" \r\n        v-loading=\"loading\" \r\n        style=\"width: 100%\"\r\n        border\r\n      >\r\n        <el-table-column prop=\"student_id\" label=\"Student ID\" width=\"120\" sortable />\r\n        <el-table-column prop=\"name\" label=\"Name\" sortable />\r\n        <el-table-column prop=\"class_name\" label=\"Class\" sortable />\r\n        <el-table-column prop=\"email\" label=\"Email\" />\r\n        <el-table-column prop=\"phone\" label=\"Phone\" width=\"150\" />\r\n        <el-table-column label=\"Actions\" width=\"200\" fixed=\"right\">\r\n          <template #default=\"scope\">\r\n            <el-button \r\n              size=\"small\" \r\n              type=\"primary\" \r\n              @click=\"$router.push(`/students/${scope.row.id}`)\"\r\n            >\r\n              View\r\n            </el-button>\r\n            <el-button \r\n              size=\"small\" \r\n              type=\"warning\" \r\n              @click=\"$router.push(`/students/${scope.row.id}/edit`)\"\r\n            >\r\n              Edit\r\n            </el-button>\r\n            <el-button \r\n              size=\"small\" \r\n              type=\"danger\" \r\n              @click=\"confirmDelete(scope.row)\"\r\n            >\r\n              Delete\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n      \r\n      <!-- Empty state -->\r\n      <el-empty \r\n        v-if=\"students.length === 0 && !loading\" \r\n        description=\"No students found\"\r\n      />\r\n      \r\n      <!-- Pagination -->\r\n      <div class=\"pagination-container\">\r\n        <el-pagination\r\n          v-if=\"pagination.total > 0\"\r\n          background\r\n          layout=\"total, sizes, prev, pager, next\"\r\n          :total=\"pagination.total\"\r\n          :page-size=\"pagination.pageSize\"\r\n          :current-page=\"pagination.page\"\r\n          :page-sizes=\"[10, 20, 50, 100]\"\r\n          @size-change=\"handleSizeChange\"\r\n          @current-change=\"handleCurrentChange\"\r\n        />\r\n      </div>\r\n    </el-card>\r\n    \r\n    <!-- Delete Confirmation Dialog -->\r\n    <el-dialog\r\n      v-model=\"deleteDialog.visible\"\r\n      title=\"Confirm Delete\"\r\n      width=\"30%\"\r\n    >\r\n      <span>Are you sure you want to delete student \"{{ deleteDialog.student?.name }}\"?</span>\r\n      <template #footer>\r\n        <span class=\"dialog-footer\">\r\n          <el-button @click=\"deleteDialog.visible = false\">Cancel</el-button>\r\n          <el-button type=\"danger\" @click=\"deleteStudent\" :loading=\"deleteDialog.loading\">\r\n            Delete\r\n          </el-button>\r\n        </span>\r\n      </template>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'StudentList',\r\n  setup() {\r\n    const store = useStore()\r\n    const loading = ref(false)\r\n    \r\n    // Get students from store\r\n    const students = computed(() => store.getters['students/allStudents'])\r\n    const pagination = computed(() => store.getters['students/pagination'])\r\n    const classOptions = computed(() => store.getters['classes/classOptions'])\r\n    \r\n    // Filter state\r\n    const filters = reactive({\r\n      classId: '',\r\n      studentId: '',\r\n      name: ''\r\n    })\r\n    \r\n    // Delete dialog state\r\n    const deleteDialog = reactive({\r\n      visible: false,\r\n      student: null,\r\n      loading: false\r\n    })\r\n    \r\n    // Fetch students and classes\r\n    const fetchData = async () => {\r\n      loading.value = true\r\n      try {\r\n        await Promise.all([\r\n          store.dispatch('students/fetchStudents'),\r\n          store.dispatch('classes/fetchClasses')\r\n        ])\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error)\r\n        ElMessage.error('Failed to load data')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // Handle filter changes\r\n    const handleFilterChange = () => {\r\n      store.dispatch('students/setFilters', {\r\n        classId: filters.classId,\r\n        studentId: filters.studentId,\r\n        name: filters.name\r\n      })\r\n    }\r\n    \r\n    // Reset filters\r\n    const resetFilters = () => {\r\n      filters.classId = ''\r\n      filters.studentId = ''\r\n      filters.name = ''\r\n      handleFilterChange()\r\n    }\r\n    \r\n    // Pagination handlers\r\n    const handleSizeChange = (size) => {\r\n      store.dispatch('students/setPagination', { pageSize: size })\r\n    }\r\n    \r\n    const handleCurrentChange = (page) => {\r\n      store.dispatch('students/setPage', page)\r\n    }\r\n    \r\n    // Delete student\r\n    const confirmDelete = (student) => {\r\n      deleteDialog.student = student\r\n      deleteDialog.visible = true\r\n    }\r\n    \r\n    const deleteStudent = async () => {\r\n      if (!deleteDialog.student) return\r\n      \r\n      deleteDialog.loading = true\r\n      try {\r\n        await store.dispatch('students/deleteStudent', deleteDialog.student.id)\r\n        ElMessage.success('Student deleted successfully')\r\n        deleteDialog.visible = false\r\n      } catch (error) {\r\n        console.error('Error deleting student:', error)\r\n        ElMessage.error('Failed to delete student')\r\n      } finally {\r\n        deleteDialog.loading = false\r\n      }\r\n    }\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(fetchData)\r\n    \r\n    return {\r\n      students,\r\n      loading,\r\n      pagination,\r\n      filters,\r\n      classOptions,\r\n      deleteDialog,\r\n      handleFilterChange,\r\n      resetFilters,\r\n      handleSizeChange,\r\n      handleCurrentChange,\r\n      confirmDelete,\r\n      deleteStudent\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.filter-card {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.pagination-container {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}