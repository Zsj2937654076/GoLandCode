{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'App',\n  setup: function setup() {\n    var store = useStore();\n    var router = useRouter();\n    var isAuthenticated = computed(function () {\n      return store.getters['auth/isAuthenticated'];\n    });\n    var user = computed(function () {\n      return store.getters['auth/user'];\n    });\n\n    // Check if user is authenticated when component is mounted\n    onMounted(function () {\n      // Try to restore session from localStorage\n      var token = localStorage.getItem('token');\n      if (token) {\n        store.dispatch('auth/restoreSession', token)[\"catch\"](function () {\n          // If the token is invalid or expired, redirect to login\n          router.push('/login');\n        });\n      } else if (router.currentRoute.value.meta.requiresAuth !== false) {\n        // Redirect to login if current route requires auth and no token\n        router.push('/login');\n      }\n    });\n\n    // Logout function\n    var logout = function logout() {\n      store.dispatch('auth/logout');\n      router.push('/login');\n    };\n    return {\n      isAuthenticated: isAuthenticated,\n      user: user,\n      logout: logout\n    };\n  }\n};","map":{"version":3,"names":["computed","onMounted","useStore","useRouter","name","setup","store","router","isAuthenticated","getters","user","token","localStorage","getItem","dispatch","push","currentRoute","value","meta","requiresAuth","logout"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <template v-if=\"$route.meta.requiresAuth === false\">\r\n      <!-- Unauthenticated routes (login page) -->\r\n      <router-view />\r\n    </template>\r\n    <template v-else>\r\n      <!-- Authenticated routes with main layout -->\r\n      <el-container v-if=\"isAuthenticated\">\r\n        <el-header class=\"app-header\">\r\n          <el-row type=\"flex\" justify=\"space-between\" align=\"middle\" style=\"height: 100%\">\r\n            <el-col :span=\"8\">\r\n              <h1>学生管理系统</h1>\r\n            </el-col>\r\n            <el-col :span=\"16\">\r\n              <el-menu mode=\"horizontal\" :router=\"true\" background-color=\"#409EFF\" text-color=\"#fff\" active-text-color=\"#ffd04b\">\r\n                <el-menu-item index=\"/dashboard\">仪表盘</el-menu-item>\r\n                <el-menu-item index=\"/students\">学生管理</el-menu-item>\r\n                <el-menu-item index=\"/classes\">班级管理</el-menu-item>\r\n                \r\n                <el-sub-menu index=\"user\" style=\"float: right;\">\r\n                  <template #title>\r\n                    <span>{{ user?.username || '用户' }}</span>\r\n                  </template>\r\n                  <el-menu-item index=\"/profile\">个人资料</el-menu-item>\r\n                  <el-menu-item index=\"/change-password\">修改密码</el-menu-item>\r\n                  <el-menu-item @click=\"logout\">退出登录</el-menu-item>\r\n                </el-sub-menu>\r\n              </el-menu>\r\n            </el-col>\r\n          </el-row>\r\n        </el-header>\r\n        \r\n        <el-main class=\"app-main\">\r\n          <router-view />\r\n        </el-main>\r\n        \r\n        <el-footer class=\"app-footer\">\r\n          <p>学生管理系统 &copy; {{ new Date().getFullYear() }}</p>\r\n        </el-footer>\r\n      </el-container>\r\n      <div v-else>\r\n        <!-- This will redirect to login if not authenticated but route requires auth -->\r\n        <router-view />\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { computed, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\n\r\nexport default {\r\n  name: 'App',\r\n  setup() {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    \r\n    const isAuthenticated = computed(() => store.getters['auth/isAuthenticated'])\r\n    const user = computed(() => store.getters['auth/user'])\r\n    \r\n    // Check if user is authenticated when component is mounted\r\n    onMounted(() => {\r\n      // Try to restore session from localStorage\r\n      const token = localStorage.getItem('token')\r\n      if (token) {\r\n        store.dispatch('auth/restoreSession', token)\r\n          .catch(() => {\r\n            // If the token is invalid or expired, redirect to login\r\n            router.push('/login')\r\n          })\r\n      } else if (router.currentRoute.value.meta.requiresAuth !== false) {\r\n        // Redirect to login if current route requires auth and no token\r\n        router.push('/login')\r\n      }\r\n    })\r\n    \r\n    // Logout function\r\n    const logout = () => {\r\n      store.dispatch('auth/logout')\r\n      router.push('/login')\r\n    }\r\n    \r\n    return {\r\n      isAuthenticated,\r\n      user,\r\n      logout\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* App-specific styles would be here, but we use main.css for global styles */\r\n</style> "],"mappings":";AAkDA,SAASA,QAAQ,EAAEC,SAAQ,QAAS,KAAI;AACxC,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,SAAQ,QAAS,YAAW;AAErC,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,KAAK,WAALA,KAAKA,CAAA,EAAG;IACN,IAAMC,KAAI,GAAIJ,QAAQ,CAAC;IACvB,IAAMK,MAAK,GAAIJ,SAAS,CAAC;IAEzB,IAAMK,eAAc,GAAIR,QAAQ,CAAC;MAAA,OAAMM,KAAK,CAACG,OAAO,CAAC,sBAAsB,CAAC;IAAA;IAC5E,IAAMC,IAAG,GAAIV,QAAQ,CAAC;MAAA,OAAMM,KAAK,CAACG,OAAO,CAAC,WAAW,CAAC;IAAA;;IAEtD;IACAR,SAAS,CAAC,YAAM;MACd;MACA,IAAMU,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO;MAC1C,IAAIF,KAAK,EAAE;QACTL,KAAK,CAACQ,QAAQ,CAAC,qBAAqB,EAAEH,KAAK,UACnC,CAAC,YAAM;UACX;UACAJ,MAAM,CAACQ,IAAI,CAAC,QAAQ;QACtB,CAAC;MACL,OAAO,IAAIR,MAAM,CAACS,YAAY,CAACC,KAAK,CAACC,IAAI,CAACC,YAAW,KAAM,KAAK,EAAE;QAChE;QACAZ,MAAM,CAACQ,IAAI,CAAC,QAAQ;MACtB;IACF,CAAC;;IAED;IACA,IAAMK,MAAK,GAAI,SAATA,MAAKA,CAAA,EAAU;MACnBd,KAAK,CAACQ,QAAQ,CAAC,aAAa;MAC5BP,MAAM,CAACQ,IAAI,CAAC,QAAQ;IACtB;IAEA,OAAO;MACLP,eAAe,EAAfA,eAAe;MACfE,IAAI,EAAJA,IAAI;MACJU,MAAK,EAALA;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}