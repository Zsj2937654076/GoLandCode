{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'StudentForm',\n  props: {\n    id: {\n      type: Number,\n      required: false\n    },\n    isEdit: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const store = useStore();\n    const router = useRouter();\n    const formRef = ref(null);\n    const loading = ref(false);\n    const submitting = ref(false);\n\n    // Form data\n    const form = reactive({\n      id: null,\n      student_id: '',\n      name: '',\n      class_id: '',\n      email: '',\n      phone: '',\n      address: ''\n    });\n\n    // Form validation rules\n    const rules = {\n      student_id: [{\n        required: true,\n        message: 'Please enter student ID',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: 'Length should be 3 to 20 characters',\n        trigger: 'blur'\n      }],\n      name: [{\n        required: true,\n        message: 'Please enter student name',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 100,\n        message: 'Length should be 2 to 100 characters',\n        trigger: 'blur'\n      }],\n      class_id: [{\n        required: true,\n        message: 'Please select a class',\n        trigger: 'change'\n      }],\n      email: [{\n        type: 'email',\n        message: 'Please enter a valid email address',\n        trigger: 'blur'\n      }]\n    };\n\n    // Get class options from store\n    const classOptions = computed(() => store.getters['classes/classOptions']);\n\n    // Fetch student data if in edit mode\n    const fetchStudentData = async () => {\n      if (!props.isEdit || !props.id) return;\n      loading.value = true;\n      try {\n        await store.dispatch('students/fetchStudent', props.id);\n        const student = store.getters['students/currentStudent'];\n        if (student) {\n          // Populate form with student data\n          form.id = student.id;\n          form.student_id = student.student_id;\n          form.name = student.name;\n          form.class_id = student.class_id;\n          form.email = student.email || '';\n          form.phone = student.phone || '';\n          form.address = student.address || '';\n        } else {\n          ElMessage.error('Student not found');\n          router.push('/students');\n        }\n      } catch (error) {\n        console.error('Error fetching student:', error);\n        ElMessage.error('Failed to load student data');\n        router.push('/students');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // Submit form\n    const submitForm = () => {\n      formRef.value.validate(async valid => {\n        if (!valid) return;\n        submitting.value = true;\n        try {\n          if (props.isEdit) {\n            // Update existing student\n            await store.dispatch('students/updateStudent', {\n              ...form\n            });\n            ElMessage.success('Student updated successfully');\n          } else {\n            // Create new student\n            await store.dispatch('students/createStudent', {\n              ...form\n            });\n            ElMessage.success('Student created successfully');\n          }\n          router.push('/students');\n        } catch (error) {\n          console.error('Error saving student:', error);\n          ElMessage.error('Failed to save student');\n        } finally {\n          submitting.value = false;\n        }\n      });\n    };\n\n    // Reset form\n    const resetForm = () => {\n      if (props.isEdit) {\n        // If editing, reset to original values\n        fetchStudentData();\n      } else {\n        // If creating new, clear all fields\n        formRef.value.resetFields();\n      }\n    };\n\n    // Fetch data on component mount\n    onMounted(async () => {\n      loading.value = true;\n      try {\n        // Fetch classes for dropdown\n        await store.dispatch('classes/fetchClasses');\n\n        // Fetch student data if in edit mode\n        if (props.isEdit) {\n          await fetchStudentData();\n        }\n      } catch (error) {\n        console.error('Error initializing form:', error);\n        ElMessage.error('Failed to initialize form');\n      } finally {\n        loading.value = false;\n      }\n    });\n    return {\n      formRef,\n      form,\n      rules,\n      loading,\n      submitting,\n      classOptions,\n      submitForm,\n      resetForm\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useStore","useRouter","ElMessage","name","props","id","type","Number","required","isEdit","Boolean","default","setup","store","router","formRef","loading","submitting","form","student_id","class_id","email","phone","address","rules","message","trigger","min","max","classOptions","getters","fetchStudentData","value","dispatch","student","error","push","console","submitForm","validate","valid","success","resetForm","resetFields"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\views\\students\\StudentForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"student-form-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">{{ isEdit ? 'Edit Student' : 'Add New Student' }}</h1>\r\n      <el-button @click=\"$router.push('/students')\">\r\n        Back to Students\r\n      </el-button>\r\n    </div>\r\n    \r\n    <el-card>\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-position=\"top\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <el-row :gutter=\"20\">\r\n          <!-- Student ID -->\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"Student ID\" prop=\"student_id\">\r\n              <el-input v-model=\"form.student_id\" placeholder=\"Enter student ID\" />\r\n            </el-form-item>\r\n          </el-col>\r\n          \r\n          <!-- Name -->\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"Name\" prop=\"name\">\r\n              <el-input v-model=\"form.name\" placeholder=\"Enter student name\" />\r\n            </el-form-item>\r\n          </el-col>\r\n          \r\n          <!-- Class -->\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"Class\" prop=\"class_id\">\r\n              <el-select \r\n                v-model=\"form.class_id\" \r\n                placeholder=\"Select class\"\r\n                style=\"width: 100%\"\r\n              >\r\n                <el-option \r\n                  v-for=\"option in classOptions\" \r\n                  :key=\"option.value\" \r\n                  :label=\"option.label\" \r\n                  :value=\"option.value\" \r\n                />\r\n              </el-select>\r\n            </el-form-item>\r\n          </el-col>\r\n          \r\n          <!-- Email -->\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"Email\" prop=\"email\">\r\n              <el-input v-model=\"form.email\" placeholder=\"Enter email address\" type=\"email\" />\r\n            </el-form-item>\r\n          </el-col>\r\n          \r\n          <!-- Phone -->\r\n          <el-col :span=\"12\">\r\n            <el-form-item label=\"Phone\" prop=\"phone\">\r\n              <el-input v-model=\"form.phone\" placeholder=\"Enter phone number\" />\r\n            </el-form-item>\r\n          </el-col>\r\n          \r\n          <!-- Address -->\r\n          <el-col :span=\"24\">\r\n            <el-form-item label=\"Address\" prop=\"address\">\r\n              <el-input \r\n                v-model=\"form.address\" \r\n                placeholder=\"Enter address\" \r\n                type=\"textarea\" \r\n                :rows=\"3\" \r\n              />\r\n            </el-form-item>\r\n          </el-col>\r\n        </el-row>\r\n        \r\n        <!-- Form Actions -->\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\r\n            {{ isEdit ? 'Update Student' : 'Create Student' }}\r\n          </el-button>\r\n          <el-button @click=\"resetForm\">Reset</el-button>\r\n          <el-button @click=\"$router.push('/students')\" type=\"info\">Cancel</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, computed, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'StudentForm',\r\n  props: {\r\n    id: {\r\n      type: Number,\r\n      required: false\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  setup(props) {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const formRef = ref(null)\r\n    const loading = ref(false)\r\n    const submitting = ref(false)\r\n    \r\n    // Form data\r\n    const form = reactive({\r\n      id: null,\r\n      student_id: '',\r\n      name: '',\r\n      class_id: '',\r\n      email: '',\r\n      phone: '',\r\n      address: ''\r\n    })\r\n    \r\n    // Form validation rules\r\n    const rules = {\r\n      student_id: [\r\n        { required: true, message: 'Please enter student ID', trigger: 'blur' },\r\n        { min: 3, max: 20, message: 'Length should be 3 to 20 characters', trigger: 'blur' }\r\n      ],\r\n      name: [\r\n        { required: true, message: 'Please enter student name', trigger: 'blur' },\r\n        { min: 2, max: 100, message: 'Length should be 2 to 100 characters', trigger: 'blur' }\r\n      ],\r\n      class_id: [\r\n        { required: true, message: 'Please select a class', trigger: 'change' }\r\n      ],\r\n      email: [\r\n        { type: 'email', message: 'Please enter a valid email address', trigger: 'blur' }\r\n      ]\r\n    }\r\n    \r\n    // Get class options from store\r\n    const classOptions = computed(() => store.getters['classes/classOptions'])\r\n    \r\n    // Fetch student data if in edit mode\r\n    const fetchStudentData = async () => {\r\n      if (!props.isEdit || !props.id) return\r\n      \r\n      loading.value = true\r\n      try {\r\n        await store.dispatch('students/fetchStudent', props.id)\r\n        const student = store.getters['students/currentStudent']\r\n        \r\n        if (student) {\r\n          // Populate form with student data\r\n          form.id = student.id\r\n          form.student_id = student.student_id\r\n          form.name = student.name\r\n          form.class_id = student.class_id\r\n          form.email = student.email || ''\r\n          form.phone = student.phone || ''\r\n          form.address = student.address || ''\r\n        } else {\r\n          ElMessage.error('Student not found')\r\n          router.push('/students')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching student:', error)\r\n        ElMessage.error('Failed to load student data')\r\n        router.push('/students')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // Submit form\r\n    const submitForm = () => {\r\n      formRef.value.validate(async valid => {\r\n        if (!valid) return\r\n        \r\n        submitting.value = true\r\n        try {\r\n          if (props.isEdit) {\r\n            // Update existing student\r\n            await store.dispatch('students/updateStudent', { ...form })\r\n            ElMessage.success('Student updated successfully')\r\n          } else {\r\n            // Create new student\r\n            await store.dispatch('students/createStudent', { ...form })\r\n            ElMessage.success('Student created successfully')\r\n          }\r\n          router.push('/students')\r\n        } catch (error) {\r\n          console.error('Error saving student:', error)\r\n          ElMessage.error('Failed to save student')\r\n        } finally {\r\n          submitting.value = false\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Reset form\r\n    const resetForm = () => {\r\n      if (props.isEdit) {\r\n        // If editing, reset to original values\r\n        fetchStudentData()\r\n      } else {\r\n        // If creating new, clear all fields\r\n        formRef.value.resetFields()\r\n      }\r\n    }\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(async () => {\r\n      loading.value = true\r\n      try {\r\n        // Fetch classes for dropdown\r\n        await store.dispatch('classes/fetchClasses')\r\n        \r\n        // Fetch student data if in edit mode\r\n        if (props.isEdit) {\r\n          await fetchStudentData()\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing form:', error)\r\n        ElMessage.error('Failed to initialize form')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    })\r\n    \r\n    return {\r\n      formRef,\r\n      form,\r\n      rules,\r\n      loading,\r\n      submitting,\r\n      classOptions,\r\n      submitForm,\r\n      resetForm\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}