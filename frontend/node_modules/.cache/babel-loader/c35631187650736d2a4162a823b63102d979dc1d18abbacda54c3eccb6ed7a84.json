{"ast":null,"code":"import _objectSpread from \"E:/GoLand20240404/Project/student_management/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"E:/GoLand20240404/Project/student_management/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"E:/GoLand20240404/Project/student_management/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { ref, reactive, onMounted } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ClassForm',\n  props: {\n    id: {\n      type: Number,\n      required: false\n    },\n    isEdit: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  setup: function setup(props) {\n    var store = useStore();\n    var router = useRouter();\n    var formRef = ref(null);\n    var loading = ref(false);\n    var submitting = ref(false);\n\n    // Form data\n    var form = reactive({\n      id: null,\n      name: '',\n      description: ''\n    });\n\n    // Form validation rules\n    var rules = {\n      name: [{\n        required: true,\n        message: 'Please enter class name',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 100,\n        message: 'Length should be 2 to 100 characters',\n        trigger: 'blur'\n      }]\n    };\n\n    // Fetch class data if in edit mode\n    var fetchClassData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var classData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!props.isEdit || !props.id)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              loading.value = true;\n              _context.prev = 3;\n              _context.next = 6;\n              return store.dispatch('classes/fetchClass', props.id);\n            case 6:\n              classData = store.getters['classes/currentClass'];\n              if (classData) {\n                // Populate form with class data\n                form.id = classData.id;\n                form.name = classData.name;\n                form.description = classData.description || '';\n              } else {\n                ElMessage.error('Class not found');\n                router.push('/classes');\n              }\n              _context.next = 15;\n              break;\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              console.error('Error fetching class:', _context.t0);\n              ElMessage.error('Failed to load class data');\n              router.push('/classes');\n            case 15:\n              _context.prev = 15;\n              loading.value = false;\n              return _context.finish(15);\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[3, 10, 15, 18]]);\n      }));\n      return function fetchClassData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // Submit form\n    var submitForm = function submitForm() {\n      formRef.value.validate(/*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(valid) {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (valid) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 2:\n                submitting.value = true;\n                _context2.prev = 3;\n                if (!props.isEdit) {\n                  _context2.next = 10;\n                  break;\n                }\n                _context2.next = 7;\n                return store.dispatch('classes/updateClass', _objectSpread({}, form));\n              case 7:\n                ElMessage.success('Class updated successfully');\n                _context2.next = 13;\n                break;\n              case 10:\n                _context2.next = 12;\n                return store.dispatch('classes/createClass', _objectSpread({}, form));\n              case 12:\n                ElMessage.success('Class created successfully');\n              case 13:\n                router.push('/classes');\n                _context2.next = 20;\n                break;\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](3);\n                console.error('Error saving class:', _context2.t0);\n                ElMessage.error('Failed to save class');\n              case 20:\n                _context2.prev = 20;\n                submitting.value = false;\n                return _context2.finish(20);\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, null, [[3, 16, 20, 23]]);\n        }));\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    };\n\n    // Reset form\n    var resetForm = function resetForm() {\n      if (props.isEdit) {\n        // If editing, reset to original values\n        fetchClassData();\n      } else {\n        // If creating new, clear all fields\n        formRef.value.resetFields();\n      }\n    };\n\n    // Fetch data on component mount\n    onMounted(function () {\n      if (props.isEdit) {\n        fetchClassData();\n      }\n    });\n    return {\n      formRef: formRef,\n      form: form,\n      rules: rules,\n      loading: loading,\n      submitting: submitting,\n      submitForm: submitForm,\n      resetForm: resetForm\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","useStore","useRouter","ElMessage","name","props","id","type","Number","required","isEdit","Boolean","setup","store","router","formRef","loading","submitting","form","description","rules","message","trigger","min","max","fetchClassData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","classData","wrap","_callee$","_context","prev","next","abrupt","value","dispatch","getters","error","push","t0","console","finish","stop","apply","arguments","submitForm","validate","_ref2","_callee2","valid","_callee2$","_context2","_objectSpread","success","_x","resetForm","resetFields"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\views\\classes\\ClassForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"class-form-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">{{ isEdit ? '编辑班级' : '添加班级' }}</h1>\r\n      <el-button @click=\"$router.push('/classes')\">\r\n        返回班级列表\r\n      </el-button>\r\n    </div>\r\n    \r\n    <el-card>\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-position=\"top\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <!-- Class Name -->\r\n        <el-form-item label=\"班级名称\" prop=\"name\">\r\n          <el-input v-model=\"form.name\" placeholder=\"请输入班级名称\" />\r\n        </el-form-item>\r\n        \r\n        <!-- Description -->\r\n        <el-form-item label=\"描述\" prop=\"description\">\r\n          <el-input \r\n            v-model=\"form.description\" \r\n            placeholder=\"请输入班级描述\" \r\n            type=\"textarea\" \r\n            :rows=\"4\" \r\n          />\r\n        </el-form-item>\r\n        \r\n        <!-- Form Actions -->\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\r\n            {{ isEdit ? '更新班级' : '创建班级' }}\r\n          </el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n          <el-button @click=\"$router.push('/classes')\" type=\"info\">取消</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive, onMounted } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ClassForm',\r\n  props: {\r\n    id: {\r\n      type: Number,\r\n      required: false\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  setup(props) {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const formRef = ref(null)\r\n    const loading = ref(false)\r\n    const submitting = ref(false)\r\n    \r\n    // Form data\r\n    const form = reactive({\r\n      id: null,\r\n      name: '',\r\n      description: ''\r\n    })\r\n    \r\n    // Form validation rules\r\n    const rules = {\r\n      name: [\r\n        { required: true, message: 'Please enter class name', trigger: 'blur' },\r\n        { min: 2, max: 100, message: 'Length should be 2 to 100 characters', trigger: 'blur' }\r\n      ]\r\n    }\r\n    \r\n    // Fetch class data if in edit mode\r\n    const fetchClassData = async () => {\r\n      if (!props.isEdit || !props.id) return\r\n      \r\n      loading.value = true\r\n      try {\r\n        await store.dispatch('classes/fetchClass', props.id)\r\n        const classData = store.getters['classes/currentClass']\r\n        \r\n        if (classData) {\r\n          // Populate form with class data\r\n          form.id = classData.id\r\n          form.name = classData.name\r\n          form.description = classData.description || ''\r\n        } else {\r\n          ElMessage.error('Class not found')\r\n          router.push('/classes')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching class:', error)\r\n        ElMessage.error('Failed to load class data')\r\n        router.push('/classes')\r\n      } finally {\r\n        loading.value = false\r\n      }\r\n    }\r\n    \r\n    // Submit form\r\n    const submitForm = () => {\r\n      formRef.value.validate(async valid => {\r\n        if (!valid) return\r\n        \r\n        submitting.value = true\r\n        try {\r\n          if (props.isEdit) {\r\n            // Update existing class\r\n            await store.dispatch('classes/updateClass', { ...form })\r\n            ElMessage.success('Class updated successfully')\r\n          } else {\r\n            // Create new class\r\n            await store.dispatch('classes/createClass', { ...form })\r\n            ElMessage.success('Class created successfully')\r\n          }\r\n          router.push('/classes')\r\n        } catch (error) {\r\n          console.error('Error saving class:', error)\r\n          ElMessage.error('Failed to save class')\r\n        } finally {\r\n          submitting.value = false\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Reset form\r\n    const resetForm = () => {\r\n      if (props.isEdit) {\r\n        // If editing, reset to original values\r\n        fetchClassData()\r\n      } else {\r\n        // If creating new, clear all fields\r\n        formRef.value.resetFields()\r\n      }\r\n    }\r\n    \r\n    // Fetch data on component mount\r\n    onMounted(() => {\r\n      if (props.isEdit) {\r\n        fetchClassData()\r\n      }\r\n    })\r\n    \r\n    return {\r\n      formRef,\r\n      form,\r\n      rules,\r\n      loading,\r\n      submitting,\r\n      submitForm,\r\n      resetForm\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}