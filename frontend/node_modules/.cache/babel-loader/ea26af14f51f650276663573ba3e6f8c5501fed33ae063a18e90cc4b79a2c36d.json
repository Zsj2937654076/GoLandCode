{"ast":null,"code":"import { ref, reactive } from 'vue';\nimport { useStore } from 'vuex';\nimport { useRouter } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nexport default {\n  name: 'ChangePassword',\n  setup() {\n    const store = useStore();\n    const router = useRouter();\n    const formRef = ref(null);\n    const loading = ref(false);\n    const submitting = ref(false);\n\n    // Form data\n    const form = reactive({\n      oldPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    });\n\n    // Validate password match\n    const validatePasswordMatch = (rule, value, callback) => {\n      if (value !== form.newPassword) {\n        callback(new Error('Passwords do not match'));\n      } else {\n        callback();\n      }\n    };\n\n    // Form validation rules\n    const rules = {\n      oldPassword: [{\n        required: true,\n        message: 'Please enter your current password',\n        trigger: 'blur'\n      }],\n      newPassword: [{\n        required: true,\n        message: 'Please enter your new password',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        message: 'Password must be at least 6 characters',\n        trigger: 'blur'\n      }],\n      confirmPassword: [{\n        required: true,\n        message: 'Please confirm your new password',\n        trigger: 'blur'\n      }, {\n        validator: validatePasswordMatch,\n        trigger: 'blur'\n      }]\n    };\n\n    // Submit form\n    const submitForm = () => {\n      formRef.value.validate(async valid => {\n        if (!valid) return;\n        submitting.value = true;\n        try {\n          await store.dispatch('auth/changePassword', {\n            oldPassword: form.oldPassword,\n            newPassword: form.newPassword\n          });\n          ElMessage.success('Password changed successfully');\n          router.push('/profile');\n        } catch (error) {\n          console.error('Error changing password:', error);\n          if (error.response && error.response.status === 400) {\n            ElMessage.error('Current password is incorrect');\n          } else {\n            ElMessage.error('Failed to change password');\n          }\n        } finally {\n          submitting.value = false;\n        }\n      });\n    };\n\n    // Reset form\n    const resetForm = () => {\n      formRef.value.resetFields();\n    };\n    return {\n      formRef,\n      form,\n      rules,\n      loading,\n      submitting,\n      submitForm,\n      resetForm\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","useStore","useRouter","ElMessage","name","setup","store","router","formRef","loading","submitting","form","oldPassword","newPassword","confirmPassword","validatePasswordMatch","rule","value","callback","Error","rules","required","message","trigger","min","validator","submitForm","validate","valid","dispatch","success","push","error","console","response","status","resetForm","resetFields"],"sources":["E:\\GoLand20240404\\Project\\student_management\\frontend\\src\\views\\auth\\ChangePassword.vue"],"sourcesContent":["<template>\r\n  <div class=\"change-password-container\">\r\n    <div class=\"page-header\">\r\n      <h1 class=\"page-title\">Change Password</h1>\r\n      <el-button @click=\"$router.push('/profile')\">\r\n        Back to Profile\r\n      </el-button>\r\n    </div>\r\n    \r\n    <el-card>\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-position=\"top\"\r\n        v-loading=\"loading\"\r\n      >\r\n        <!-- Current Password -->\r\n        <el-form-item label=\"Current Password\" prop=\"oldPassword\">\r\n          <el-input \r\n            v-model=\"form.oldPassword\" \r\n            placeholder=\"Enter your current password\" \r\n            type=\"password\"\r\n            show-password\r\n          />\r\n        </el-form-item>\r\n        \r\n        <!-- New Password -->\r\n        <el-form-item label=\"New Password\" prop=\"newPassword\">\r\n          <el-input \r\n            v-model=\"form.newPassword\" \r\n            placeholder=\"Enter your new password\" \r\n            type=\"password\"\r\n            show-password\r\n          />\r\n        </el-form-item>\r\n        \r\n        <!-- Confirm New Password -->\r\n        <el-form-item label=\"Confirm New Password\" prop=\"confirmPassword\">\r\n          <el-input \r\n            v-model=\"form.confirmPassword\" \r\n            placeholder=\"Confirm your new password\" \r\n            type=\"password\"\r\n            show-password\r\n          />\r\n        </el-form-item>\r\n        \r\n        <!-- Form Actions -->\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitForm\" :loading=\"submitting\">\r\n            Change Password\r\n          </el-button>\r\n          <el-button @click=\"resetForm\">Reset</el-button>\r\n          <el-button @click=\"$router.push('/profile')\" type=\"info\">Cancel</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, reactive } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { useRouter } from 'vue-router'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nexport default {\r\n  name: 'ChangePassword',\r\n  setup() {\r\n    const store = useStore()\r\n    const router = useRouter()\r\n    const formRef = ref(null)\r\n    const loading = ref(false)\r\n    const submitting = ref(false)\r\n    \r\n    // Form data\r\n    const form = reactive({\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      confirmPassword: ''\r\n    })\r\n    \r\n    // Validate password match\r\n    const validatePasswordMatch = (rule, value, callback) => {\r\n      if (value !== form.newPassword) {\r\n        callback(new Error('Passwords do not match'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    \r\n    // Form validation rules\r\n    const rules = {\r\n      oldPassword: [\r\n        { required: true, message: 'Please enter your current password', trigger: 'blur' }\r\n      ],\r\n      newPassword: [\r\n        { required: true, message: 'Please enter your new password', trigger: 'blur' },\r\n        { min: 6, message: 'Password must be at least 6 characters', trigger: 'blur' }\r\n      ],\r\n      confirmPassword: [\r\n        { required: true, message: 'Please confirm your new password', trigger: 'blur' },\r\n        { validator: validatePasswordMatch, trigger: 'blur' }\r\n      ]\r\n    }\r\n    \r\n    // Submit form\r\n    const submitForm = () => {\r\n      formRef.value.validate(async valid => {\r\n        if (!valid) return\r\n        \r\n        submitting.value = true\r\n        try {\r\n          await store.dispatch('auth/changePassword', {\r\n            oldPassword: form.oldPassword,\r\n            newPassword: form.newPassword\r\n          })\r\n          \r\n          ElMessage.success('Password changed successfully')\r\n          router.push('/profile')\r\n        } catch (error) {\r\n          console.error('Error changing password:', error)\r\n          if (error.response && error.response.status === 400) {\r\n            ElMessage.error('Current password is incorrect')\r\n          } else {\r\n            ElMessage.error('Failed to change password')\r\n          }\r\n        } finally {\r\n          submitting.value = false\r\n        }\r\n      })\r\n    }\r\n    \r\n    // Reset form\r\n    const resetForm = () => {\r\n      formRef.value.resetFields()\r\n    }\r\n    \r\n    return {\r\n      formRef,\r\n      form,\r\n      rules,\r\n      loading,\r\n      submitting,\r\n      submitForm,\r\n      resetForm\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.page-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n}\r\n</style> "],"mappings":"AA6DA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAI;AAClC,SAASC,QAAO,QAAS,MAAK;AAC9B,SAASC,SAAQ,QAAS,YAAW;AACrC,SAASC,SAAQ,QAAS,cAAa;AAEvC,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAKA,CAAA,EAAG;IACN,MAAMC,KAAI,GAAIL,QAAQ,CAAC;IACvB,MAAMM,MAAK,GAAIL,SAAS,CAAC;IACzB,MAAMM,OAAM,GAAIT,GAAG,CAAC,IAAI;IACxB,MAAMU,OAAM,GAAIV,GAAG,CAAC,KAAK;IACzB,MAAMW,UAAS,GAAIX,GAAG,CAAC,KAAK;;IAE5B;IACA,MAAMY,IAAG,GAAIX,QAAQ,CAAC;MACpBY,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE;IACnB,CAAC;;IAED;IACA,MAAMC,qBAAoB,GAAIA,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;MACvD,IAAID,KAAI,KAAMN,IAAI,CAACE,WAAW,EAAE;QAC9BK,QAAQ,CAAC,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC9C,OAAO;QACLD,QAAQ,CAAC;MACX;IACF;;IAEA;IACA,MAAME,KAAI,GAAI;MACZR,WAAW,EAAE,CACX;QAAES,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,oCAAoC;QAAEC,OAAO,EAAE;MAAO,EAClF;MACDV,WAAW,EAAE,CACX;QAAEQ,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,gCAAgC;QAAEC,OAAO,EAAE;MAAO,CAAC,EAC9E;QAAEC,GAAG,EAAE,CAAC;QAAEF,OAAO,EAAE,wCAAwC;QAAEC,OAAO,EAAE;MAAO,EAC9E;MACDT,eAAe,EAAE,CACf;QAAEO,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,kCAAkC;QAAEC,OAAO,EAAE;MAAO,CAAC,EAChF;QAAEE,SAAS,EAAEV,qBAAqB;QAAEQ,OAAO,EAAE;MAAO;IAExD;;IAEA;IACA,MAAMG,UAAS,GAAIA,CAAA,KAAM;MACvBlB,OAAO,CAACS,KAAK,CAACU,QAAQ,CAAC,MAAMC,KAAI,IAAK;QACpC,IAAI,CAACA,KAAK,EAAE;QAEZlB,UAAU,CAACO,KAAI,GAAI,IAAG;QACtB,IAAI;UACF,MAAMX,KAAK,CAACuB,QAAQ,CAAC,qBAAqB,EAAE;YAC1CjB,WAAW,EAAED,IAAI,CAACC,WAAW;YAC7BC,WAAW,EAAEF,IAAI,CAACE;UACpB,CAAC;UAEDV,SAAS,CAAC2B,OAAO,CAAC,+BAA+B;UACjDvB,MAAM,CAACwB,IAAI,CAAC,UAAU;QACxB,EAAE,OAAOC,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;UAC/C,IAAIA,KAAK,CAACE,QAAO,IAAKF,KAAK,CAACE,QAAQ,CAACC,MAAK,KAAM,GAAG,EAAE;YACnDhC,SAAS,CAAC6B,KAAK,CAAC,+BAA+B;UACjD,OAAO;YACL7B,SAAS,CAAC6B,KAAK,CAAC,2BAA2B;UAC7C;QACF,UAAU;UACRtB,UAAU,CAACO,KAAI,GAAI,KAAI;QACzB;MACF,CAAC;IACH;;IAEA;IACA,MAAMmB,SAAQ,GAAIA,CAAA,KAAM;MACtB5B,OAAO,CAACS,KAAK,CAACoB,WAAW,CAAC;IAC5B;IAEA,OAAO;MACL7B,OAAO;MACPG,IAAI;MACJS,KAAK;MACLX,OAAO;MACPC,UAAU;MACVgB,UAAU;MACVU;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}